{
  "version": 3,
  "file": "ng2-flatpickr.umd.min.js",
  "sources": [
    "ng://ng2-flatpickr/out/src/ng2-flatpickr.component.ts",
    "ng://ng2-flatpickr/out/src/ng2-flatpickr.directive.ts",
    "ng://ng2-flatpickr/out/src/ng2-flatpickr.module.ts"
  ],
  "sourcesContent": [
    "import { Component, ViewChild, AfterViewInit, forwardRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\ndeclare var require: any;\n\nif(typeof window !== 'undefined'){\n    require( 'flatpickr' );\n}\n\n@Component({\n\tselector: 'ng2-flatpickr',\n\ttemplate: `\n\t\t<div class=\"ng2-flatpickr-input-container\" #flatpickr>\n\t\t\t<input *ngIf=\"!hideButton\" class=\"ng2-flatpickr-input {{ addClass }}\" [placeholder]=\"placeholder\" [tabindex]=\"tabindex\" type=\"text\" data-input>\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef( () => Ng2FlatpickrComponent ),\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Ng2FlatpickrComponent implements AfterViewInit, ControlValueAccessor, OnChanges {\n\n  private flatpickr: Object;\n  private _tabindex = 0;\n\n\tprivate defaultFlatpickrOptions: FlatpickrOptions = {\n\t\twrap: true,\n\t\tclickOpens: true,\n\t\tonChange: ( selectedDates: any ) => { this.writeValue( selectedDates ); }\n\t};\n\n\t@ViewChild('flatpickr')\n\tflatpickrElement: any;\n\n\t@Input()\n\tconfig: FlatpickrOptions;\n\n\t@Input()\n\tplaceholder: string = \"\";\n\n  @Input()\n\taddClass: string = \"\";\n\n\t@Input()\n\tsetDate: string | Date;\n\n  @Input()\n  get tabindex() { return this._tabindex; }\n  set tabindex( ti: number ) { this._tabindex = Number( ti ); }\n\n\t@Input()\n\thideButton = false;\n\n\t///////////////////////////////////\n\n\twriteValue( value:any ) {\n\t\tthis.propagateChange( value );\n\t}\n\n\tregisterOnChange( fn: any ) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched() {}\n\n\tpropagateChange = ( _: any ) => {};\n\n\t///////////////////////////////////\n\n\tsetDateFromInput( date: any ) {\n\t\tif( this.flatpickrElement.nativeElement ) {\n\t\t\tif( this.flatpickrElement.nativeElement.flatpickr ){\n\t\t\t\tthis.flatpickrElement.nativeElement._flatpickr.setDate( date, true );\n\t\t\t}\n\t\t}\n\t}\n\n\tngAfterViewInit() {\n\t\tif( this.config ) {\n\t\t\tObject.assign( this.defaultFlatpickrOptions, this.config );\n\t\t}\n\t\tthis.flatpickr = this.flatpickrElement.nativeElement.flatpickr( this.defaultFlatpickrOptions );\n\t\tif( this.setDate ) {\n\t\t\tthis.setDateFromInput( this.setDate );\n\t\t}\n\t}\n\n\tngOnChanges( changes: SimpleChanges ) {\n\t\tif( this.flatpickrElement.nativeElement ) {\n\t\t\tif( this.flatpickrElement.nativeElement.flatpickr ){\n\t\t\t\tif( changes.hasOwnProperty( 'setDate' ) && changes[ 'setDate' ].currentValue ) {\n\t\t\t\t\tthis.setDateFromInput( changes[ 'setDate' ].currentValue );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
    "import {\n\tAfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input,\n\tOnDestroy, OnInit, Output, Renderer\n} from '@angular/core';\nimport { ControlContainer, FormControl, NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FlatpickrEvent } from './flatpickr-event.interface';\nimport { FlatpickrInstance } from './flatpickr-instance';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\n@Directive({ selector: '[flatpickr]', exportAs: 'ng2-flatpickr' })\nexport class Ng2FlatpickrDirective implements AfterViewInit, OnDestroy, OnInit {\n\t/**\n\t * The flatpickr configuration as a single object of values.\n\t *\n\t * See https://chmln.github.io/flatpickr/options/ for full list.\n\t */\n\t@Input( 'flatpickr' ) public flatpickrOptions: FlatpickrOptions;\n\n\t/**\n\t * Exactly the same as date format, but for the altInput field.\n\t *\n\t * Default:  \"F j, Y\"\n\t */\n\t@Input( 'altFormat' ) public flatpickrAltFormat: string;\n\n\t/**\n\t * Show the user a readable date (as per altFormat), but return something\n\t * totally different to the server.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'altInput' ) public flatpickrAltInput: boolean;\n\n\t/**\n\t * This class will be added to the input element created by the altInput\n\t * option.\n\t *\n\t * Default:  \"\"\n\t */\n\t@Input( 'altInputClass' ) public flatpickrAltInputClass: string;\n\n\t/**\n\t * Allows the user to enter a date directly input the input field. By\n\t * default, direct entry is disabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'allowInput' ) public flatpickrAllowInput: boolean;\n\n\t/**\n\t * Instead of body, appends the calendar to the specified node instead.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'appendTo' ) public flatpickrAppendTo: HTMLElement;\n\n\t/**\n\t * Whether clicking on the input should open the picker.\n\t * You could disable this if you wish to open the calendar manually\n\t * with.open().\n\t *\n\t * Default:  true\n\t */\n\t@Input( 'clickOpens' ) public flatpickrClickOpens: boolean;\n\n\t/**\n\t * A string of characters which are used to define how the date will be\n\t * displayed in the input box.\n\t * See https://chmln.github.io/flatpickr/formatting/ for supported tokens.\n\t *\n\t * Default:  \"Y-m-d\"\n\t */\n\t@Input( 'dateFormat' ) public flatpickrDateFormat: string;\n\n\t/**\n\t * Sets the initial selected date(s).\n\t *\n\t * If you're using {mode: \"multiple\"} or a range calendar supply an Array of\n\t * Date objects or an Array of date strings which follow your dateFormat.\n\t *\n\t * Otherwise, you can supply a single Date object or a date string.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'defaultDate' ) public flatpickrDefaultDate: string | Date;\n\n\t/**\n\t * Disable an array of specific dates, date ranges, or functions to disable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\n\t *\n\t * Default:  []\n\t */\n\t@Input( 'disable' ) public flatpickrDisable: string[] | Date[];\n\n\t/**\n\t * Set disableMobile to true to always use the non-native picker. By\n\t * default, Flatpickr utilizes native datetime widgets unless certain\n\t * options (e.g. disable) are used.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'disableMobile' ) public flatpickrDisableMobile: boolean;\n\n\t/**\n\t * Enable an array of specific dates, date ranges, or functions to enable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\n\t *\n\t * Default:  []\n\t */\n\t@Input( 'enable' ) public flatpickrEnable: string[] | Date[];\n\n\t/**\n\t * Enables time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'enableTime' ) public flatpickrEnableTime: boolean;\n\n\t/**\n\t * Enables seconds in the time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'enableSeconds' ) public flatpickrEnableSeconds: boolean;\n\n\t/**\n\t * Adjusts the step for the hour input (incl. scrolling).\n\t *\n\t * Default:  1\n\t */\n\t@Input( 'hourIncrement' ) public flatpickrHourIncrement: number;\n\n\t/**\n\t * Displays the calendar inline.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'inline' ) public flatpickrInline: boolean;\n\n\t/**\n\t * Use a specific locale for the flatpickr instance.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'locale' ) public flatpickrLocale: Object;\n\n\t/**\n\t * The maximum date that a user can pick to (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'maxDate' ) public flatpickrMaxDate: string | Date;\n\n\t/**\n\t * The minimum date that a user can start picking from (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'minDate' ) public flatpickrMinDate: string | Date;\n\n\t/**\n\t * Adjusts the step for the minute input (incl. scrolling).\n\t *\n\t * Default:  5\n\t */\n\t@Input( 'minuteIncrement' ) public flatpickrMinuteIncrement: number;\n\n\t/**\n\t * \"single\", \"multiple\", or \"range\"\n\t *\n\t * Default:  \"single\"\n\t */\n\t@Input( 'mode' ) public flatpickrMode: string;\n\n\t/**\n\t * HTML for the arrow icon, used to switch months.\n\t *\n\t * Default:  \">\"\n\t */\n\t@Input( 'nextArrow' ) public flatpickrNextArrow: string;\n\n\t/**\n\t * Hides the day selection in calendar. Use it along with enableTime to\n\t * create a time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'noCalendar' ) public flatpickrNoCalendar: boolean;\n\n\t/**\n\t * Function that expects a date string and must return a Date object.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'parseDate' ) public flatpickrParseDate: Function;\n\n\t/**\n\t * HTML for the left arrow icon.\n\t *\n\t * Default:  \"<\"\n\t */\n\t@Input( 'prevArrow' ) public flatpickrPrevArrow: string;\n\n\t/**\n\t * Show the month using the shorthand version (ie, Sep instead of September).\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'shorthandCurrentMonth' ) public flatpickrShorthandCurrentMonth: boolean;\n\n\t/**\n\t * Position the calendar inside the wrapper and next to the input element\n\t * (Leave false unless you know what you're doing).\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'static' ) public flatpickrStatic: boolean;\n\n\t/**\n\t * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'time_24hr' ) public flatpickrTime_24hr: boolean;\n\n\t@Input( 'utc' ) public flatpickrUtc: boolean;\n\n\t/**\n\t * Enables display of week numbers in calendar.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'weekNumbers' ) public flatpickrWeekNumbers: boolean;\n\n\t/**\n\t * Custom elements and input groups.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'wrap' ) public flatpickrWrap: boolean;\n\n\t/**\n\t * onChange gets triggered when the user selects a date, or changes the time on a selected date.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onChange' ) public flatpickrOnChange: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onClose gets triggered when the calendar is closed.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onClose' ) public flatpickrOnClose: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onOpen gets triggered when the calendar is opened.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onOpen' ) public flatpickrOnOpen: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onReady gets triggered once the calendar is in a ready state.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onReady' ) public flatpickrOnReady: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/** Allow double-clicking on the control to open/close it. */\n\t@HostListener( 'dblclick' )\n\tpublic onClick() {\n\t\tthis.flatpickr.toggle();\n\t}\n\n\tprotected globalOnChange: Function;\n\tprotected globalOnClose: Function;\n\tprotected globalOnOpen: Function;\n\tprotected globalOnReady: Function;\n\n\tprotected flatpickr: FlatpickrInstance;\n\tprotected formControlListener: Subscription;\n\n\t/** Allow access properties using index notation */\n\t[key:string]: any;\n\n\tconstructor(\n\t\tprotected parent: ControlContainer,\n\t\tprotected ngControl: NgControl,\n\t\tprotected element: ElementRef,\n\t\tprotected renderer: Renderer\n\t) {}\n\n\tget control(): FormControl {\n\t\treturn this.parent ? this.parent.formDirective.getControl(this.ngControl) : null;\n\t}\n\n\tngAfterViewInit() {\n\t\t/** We cannot initialize the flatpickr instance in ngOnInit(); it will\n\t\t\trandomize the date when the form control initializes. */\n\t\tlet nativeElement = this.element.nativeElement;\n\n\t\tif (typeof nativeElement === 'undefined' || nativeElement === null) {\n\t\t\tthrow 'Error: invalid input element specified';\n\t\t}\n\n\t\tif (this.flatpickrOptions.wrap) {\n\t\t\tthis.renderer.setElementAttribute( this.element.nativeElement, 'data-input', '' );\n\t\t\tnativeElement = nativeElement.parentNode;\n\t\t}\n\n\t\tthis.flatpickr = <FlatpickrInstance>nativeElement.flatpickr( this.flatpickrOptions );\n\t}\n\n\tngOnDestroy() {\n\t\tif (this.flatpickr) {\n\t\t\tthis.flatpickr.destroy();\n\t\t}\n\n\t\tif (this.formControlListener) {\n\t\t\tthis.formControlListener.unsubscribe();\n\t\t\tthis.formControlListener = undefined;\n\t\t}\n\n\t\tthis.flatpickrOnChange = undefined;\n\t\tthis.flatpickrOnClose = undefined;\n\t\tthis.flatpickrOnOpen = undefined;\n\t\tthis.flatpickrOnReady = undefined;\n\t}\n\n\tngOnInit() {\n\t\tthis.globalOnChange = this.flatpickrOptions.onChange;\n\t\tthis.globalOnClose = this.flatpickrOptions.onClose;\n\t\tthis.globalOnOpen = this.flatpickrOptions.onOpen;\n\t\tthis.globalOnReady = this.flatpickrOptions.onReady;\n\n\t\tthis.flatpickrOptions = {\n\t\t\taltFormat: this.getOption('altFormat'),\n\t\t\taltInput: this.getOption('altInput'),\n\t\t\taltInputClass: this.getOption('altInputClass'),\n\t\t\tallowInput: this.getOption('allowInput'),\n\t\t\tappendTo: this.getOption('appendTo'),\n\t\t\tclickOpens: this.getOption('clickOpens', true),\n\t\t\tdateFormat: this.getOption('dateFormat'),\n\t\t\tdefaultDate: this.getOption('defaultDate'),\n\t\t\tdisable: this.getOption('disable'),\n\t\t\tdisableMobile: this.getOption('disableMobile'),\n\t\t\tenable: this.getOption('enable'),\n\t\t\tenableTime: this.getOption('enableTime'),\n\t\t\tenableSeconds: this.getOption('enableSeconds'),\n\t\t\thourIncrement: this.getOption('hourIncrement'),\n\t\t\tinline: this.getOption('inline'),\n\t\t\tlocale: this.getOption('locale'),\n\t\t\tmaxDate: this.getOption('maxDate'),\n\t\t\tminDate: this.getOption('minDate'),\n\t\t\tminuteIncrement: this.getOption('minuteIncrement'),\n\t\t\tmode: this.getOption('mode'),\n\t\t\tnextArrow: this.getOption('nextArrow'),\n\t\t\tnoCalendar: this.getOption('noCalendar'),\n\t\t\tonChange: this.eventOnChange,\n\t\t\tonClose: this.eventOnClose,\n\t\t\tonOpen: this.eventOnOpen,\n\t\t\tonReady: this.eventOnReady,\n\t\t\tparseDate: this.getOption('parseDate'),\n\t\t\tprevArrow: this.getOption('prevArrow'),\n\t\t\tshorthandCurrentMonth: this.getOption('shorthandCurrentMonth'),\n\t\t\tstatic: this.getOption('static'),\n\t\t\ttime_24hr: this.getOption('time_24hr'),\n\t\t\tutc: this.getOption('utc'),\n\t\t\tweekNumbers: this.getOption('weekNumbers'),\n\t\t\twrap: this.getOption('wrap', true),\n\t\t};\n\n\t\t// Remove unset properties\n\t\tObject.keys( this.flatpickrOptions ).forEach( ( key: string ) => {\n\t\t\t(this.flatpickrOptions[key] === undefined) &&\n\t\t\t\tdelete this.flatpickrOptions[key];\n\t\t} );\n\n\t\tif (this.control) {\n\t\t\tthis.formControlListener = this.control.valueChanges\n\t\t\t\t.subscribe( ( value: any ) => {\n\t\t\t\t\tif ( !( value instanceof Date ) ) {\n\t\t\t\t\t\t// Quietly update the value of the form control to be a\n\t\t\t\t\t\t// Date object. This avoids any external subscribers\n\t\t\t\t\t\t// from being notified a second time (once for the user\n\t\t\t\t\t\t// initiated event, and once for our conversion to\n\t\t\t\t\t\t// Date()).\n\t\t\t\t\t\tthis.control.setValue( new Date( '' + value ), {\n\t\t\t\t\t\t\tonlySelf: true,\n\t\t\t\t\t\t\temitEvent: false,\n\t\t\t\t\t\t\temitModelToViewChange: false,\n\t\t\t\t\t\t\temitViewToModelChange: false\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onChange callback, if defined.\n\t */\n\tprotected eventOnChange( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnChange ) {\n\t\t\tthis.flatpickrOnChange.emit( event );\n\t\t}\n\t\tif( this.globalOnChange ) {\n\t\t\tthis.globalOnChange( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onClose callback, if defined.\n\t */\n\tprotected eventOnClose( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnClose ) {\n\t\t\tthis.flatpickrOnClose.emit( event );\n\t\t}\n\t\tif( this.globalOnClose ) {\n\t\t\tthis.globalOnClose( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onOpen callback, if defined.\n\t */\n\tprotected eventOnOpen( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnOpen ) {\n\t\t\tthis.flatpickrOnOpen.emit( event );\n\t\t}\n\t\tif( this.globalOnOpen ) {\n\t\t\tthis.globalOnOpen( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onReady callback, if defined.\n\t */\n\tprotected eventOnReady( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnReady ) {\n\t\t\tthis.flatpickrOnReady.emit( event );\n\t\t}\n\t\tif( this.globalOnReady ) {\n\t\t\tthis.globalOnReady( event );\n\t\t}\n\t}\n\n\t/**\n\t * Return the configuration value for option {option}, or {defaultValue} if it\n\t * doesn't exist.\n\t */\n\tprotected getOption( option: string, defaultValue?: any ): any {\n\t\tlet localName = 'flatpickr' + option.substring( 0, 1 ).toUpperCase()\n\t\t\t+ option.substring( 1 );\n\n\t\tif ( typeof this[localName] !== 'undefined' ) {\n\t\t\treturn this[localName];\n\t\t} else if ( typeof this.flatpickrOptions[option] !== 'undefined' ) {\n\t\t\treturn this.flatpickrOptions[option];\n\t\t} else {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Ng2FlatpickrComponent } from './ng2-flatpickr.component';\nimport { Ng2FlatpickrDirective } from './ng2-flatpickr.directive';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ],\n    exports: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ]\n})\nexport class Ng2FlatpickrModule {\n}"
  ],
  "names": [
    "window",
    "require",
    "Ng2FlatpickrComponent",
    "this",
    "_tabindex",
    "defaultFlatpickrOptions",
    "wrap",
    "clickOpens",
    "onChange",
    "selectedDates",
    "_this",
    "writeValue",
    "placeholder",
    "addClass",
    "hideButton",
    "propagateChange",
    "_",
    "Object",
    "defineProperty",
    "prototype",
    "get",
    "set",
    "ti",
    "Number",
    "value",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "setDateFromInput",
    "date",
    "flatpickrElement",
    "nativeElement",
    "flatpickr",
    "_flatpickr",
    "setDate",
    "ngAfterViewInit",
    "config",
    "assign",
    "ngOnChanges",
    "changes",
    "hasOwnProperty",
    "currentValue",
    "type",
    "Component",
    "args",
    "selector",
    "template",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "ViewChild",
    "Input",
    "tabindex",
    "Ng2FlatpickrDirective",
    "parent",
    "ngControl",
    "element",
    "renderer",
    "flatpickrOnChange",
    "EventEmitter",
    "flatpickrOnClose",
    "flatpickrOnOpen",
    "flatpickrOnReady",
    "onClick",
    "toggle",
    "formDirective",
    "getControl",
    "flatpickrOptions",
    "setElementAttribute",
    "parentNode",
    "ngOnDestroy",
    "destroy",
    "formControlListener",
    "unsubscribe",
    "undefined",
    "ngOnInit",
    "globalOnChange",
    "globalOnClose",
    "onClose",
    "globalOnOpen",
    "onOpen",
    "globalOnReady",
    "onReady",
    "altFormat",
    "getOption",
    "altInput",
    "altInputClass",
    "allowInput",
    "appendTo",
    "dateFormat",
    "defaultDate",
    "disable",
    "disableMobile",
    "enable",
    "enableTime",
    "enableSeconds",
    "hourIncrement",
    "inline",
    "locale",
    "maxDate",
    "minDate",
    "minuteIncrement",
    "mode",
    "nextArrow",
    "noCalendar",
    "eventOnChange",
    "eventOnClose",
    "eventOnOpen",
    "eventOnReady",
    "parseDate",
    "prevArrow",
    "shorthandCurrentMonth",
    "static",
    "time_24hr",
    "utc",
    "weekNumbers",
    "keys",
    "forEach",
    "key",
    "control",
    "valueChanges",
    "subscribe",
    "Date",
    "setValue",
    "onlySelf",
    "emitEvent",
    "emitModelToViewChange",
    "emitViewToModelChange",
    "dateStr",
    "instance",
    "event",
    "emit",
    "option",
    "defaultValue",
    "localName",
    "substring",
    "toUpperCase",
    "Directive",
    "exportAs",
    "ControlContainer",
    "NgControl",
    "ElementRef",
    "Renderer",
    "flatpickrAltFormat",
    "flatpickrAltInput",
    "flatpickrAltInputClass",
    "flatpickrAllowInput",
    "flatpickrAppendTo",
    "flatpickrClickOpens",
    "flatpickrDateFormat",
    "flatpickrDefaultDate",
    "flatpickrDisable",
    "flatpickrDisableMobile",
    "flatpickrEnable",
    "flatpickrEnableTime",
    "flatpickrEnableSeconds",
    "flatpickrHourIncrement",
    "flatpickrInline",
    "flatpickrLocale",
    "flatpickrMaxDate",
    "flatpickrMinDate",
    "flatpickrMinuteIncrement",
    "flatpickrMode",
    "flatpickrNextArrow",
    "flatpickrNoCalendar",
    "flatpickrParseDate",
    "flatpickrPrevArrow",
    "flatpickrShorthandCurrentMonth",
    "flatpickrStatic",
    "flatpickrTime_24hr",
    "flatpickrUtc",
    "flatpickrWeekNumbers",
    "flatpickrWrap",
    "Output",
    "HostListener",
    "Ng2FlatpickrModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
